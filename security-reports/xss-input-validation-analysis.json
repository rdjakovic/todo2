{
  "timestamp": "2025-07-16T13:52:29.301Z",
  "analysis": "XSS and Input Validation Security Analysis",
  "vulnerabilities": [
    {
      "id": "xss-output-encoding-1752673949179-0.6511436716481396",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\Sidebar",
      "file": "src\\components\\Sidebar.tsx",
      "line": 55,
      "description": "User data rendered without proper encoding",
      "evidence": "{\r\n      if (isResizing) {\r\n        const newWidth = e.clientX;\r\n        const currentWidth = width;\r\n\r\n        if (newWidth >= 200 && newWidth <= 600) {\r\n          const listItems = document.querySelectorAll(\".list-item-container\");\r\n          let hasOverflow = false;\r\n\r\n          if (newWidth < currentWidth) {\r\n            listItems.forEach((item) => {\r\n              const containerWidth = newWidth - 32;\r\n              if (\r\n                item.clientWidth === containerWidth &&\r\n                item.scrollWidth > containerWidth\r\n              ) {\r\n                hasOverflow = true;\r\n              }",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949181-0.33478173377320086",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 52,
      "description": "User data rendered without proper encoding",
      "evidence": "{\r\n      id: todo.id,\r\n      data: todo,\r\n    }",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949181-0.007887973611132137",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 88,
      "description": "User data rendered without proper encoding",
      "evidence": "{clsx(\r\n            \"py-3 sm:py-2 px-4 sm:px-3 rounded-lg shadow-sm border flex items-center gap-3\",\r\n            getPriorityColors(todo.completed),\r\n            (isDragging || isSortableDragging) && \"opacity-50 cursor-grabbing\",\r\n            !isDragging && !isSortableDragging && \"cursor-grab\"\r\n          )}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949181-0.8423683047693342",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 96,
      "description": "User data rendered without proper encoding",
      "evidence": "{() => onToggle(todo.id)}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949181-0.11141369172480808",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 97,
      "description": "User data rendered without proper encoding",
      "evidence": "{clsx(\r\n              \"w-6 h-6 sm:w-5 sm:h-5 rounded-full border-2 flex items-center justify-center flex-shrink-0\",\r\n              todo.completed\r\n                ? \"border-green-500 bg-green-500\"\r\n                : \"border-gray-300 dark:border-gray-500\"\r\n            )}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.7392256809933564",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 104,
      "description": "User data rendered without proper encoding",
      "evidence": "{todo.completed && <CheckIcon className=\"w-4 h-4 sm:w-3 sm:h-3 text-white\" />}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.3663202507869303",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 118,
      "description": "User data rendered without proper encoding",
      "evidence": "{clsx(\r\n                  \"text-base sm:text-sm text-gray-800 dark:text-gray-100 whitespace-pre-wrap leading-relaxed\",\r\n                  todo.completed &&\r\n                    \"line-through text-gray-500 dark:text-gray-400\"\r\n                )}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.8242287877839451",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 125,
      "description": "User data rendered without proper encoding",
      "evidence": "{todo.title}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.874583401316076",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 126,
      "description": "User data rendered without proper encoding",
      "evidence": "{todo.notes && todo.notes.trim() && (\r\n                    <button\r\n                      onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        setShowNotes(!showNotes);\r\n                      }",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.8434951133301012",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 146,
      "description": "User data rendered without proper encoding",
      "evidence": "{todo.notes && todo.notes.trim() && showNotes && (\r\n                <div className=\"mt-2 p-2 bg-gray-50 dark:bg-gray-700/50 rounded text-xs text-gray-600 dark:text-gray-300 whitespace-pre-wrap\">\r\n                  {todo.notes}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.02341831380410908",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 157,
      "description": "User data rendered without proper encoding",
      "evidence": "{isValidNativeDate(todo.dateCreated)\r\n                      ? window.innerWidth < 640\r\n                        ? formatMobileDate(todo.dateCreated) // New compact format for mobile\r\n                        : formatNativeDate(todo.dateCreated)\r\n                      : \"Invalid creation date\"}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.9248842293539699",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 163,
      "description": "User data rendered without proper encoding",
      "evidence": "{todo.priority && (\r\n                    <span className={clsx(\r\n                      \"px-2 py-0.5 rounded-full text-xs font-medium\",\r\n                      getPriorityBadgeColors(todo.priority)\r\n                    )}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.04719947519833334",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 168,
      "description": "User data rendered without proper encoding",
      "evidence": "{todo.priority}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.27301116530005176",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 172,
      "description": "User data rendered without proper encoding",
      "evidence": "{todo.dueDate && (\r\n                    <span className=\"hidden sm:inline-block px-2 py-0.5 rounded-full text-xs font-medium bg-orange-100 dark:bg-orange-900/50 text-orange-700 dark:text-orange-300\">\r\n                      Due: {isValidNativeDate(todo.dueDate) ? formatNativeDate(todo.dueDate) : \"Invalid date\"}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.4707836142991797",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 180,
      "description": "User data rendered without proper encoding",
      "evidence": "{todo.completed && todo.dateOfCompletion && (\r\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1 sm:mt-0\">\r\n                    Completed:{\" \"}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.09308209023843839",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 183,
      "description": "User data rendered without proper encoding",
      "evidence": "{isValidNativeDate(todo.dateOfCompletion)\r\n                      ? window.innerWidth < 640\r\n                        ? formatMobileDate(todo.dateOfCompletion) // New compact format for mobile\r\n                        : formatNativeDate(todo.dateOfCompletion)\r\n                      : \"Invalid completion date\"}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.6918703160756801",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 193,
      "description": "User data rendered without proper encoding",
      "evidence": "{todo.dueDate && (\r\n                <div className=\"sm:hidden mt-1\">\r\n                  <span className=\"px-2 py-0.5 rounded-full text-xs font-medium bg-orange-100 dark:bg-orange-900/50 text-orange-700 dark:text-orange-300\">\r\n                    Due: {isValidNativeDate(todo.dueDate) ? formatNativeDate(todo.dueDate) : \"Invalid date\"}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.5064531748301626",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 205,
      "description": "User data rendered without proper encoding",
      "evidence": "{!todo.completed && (\r\n              <button\r\n                onClick={(e) => {\r\n                  e.stopPropagation(); // Prevent triggering the div click\r\n                  onOpenEditDialog(todo, false); // Open in edit mode\r\n                }",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.9806240553493104",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoItem",
      "file": "src\\components\\TodoItem.tsx",
      "line": 218,
      "description": "User data rendered without proper encoding",
      "evidence": "{(e) => {\r\n                e.stopPropagation(); // Prevent triggering the div click\r\n                onDelete(todo.id);\r\n              }",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.6269578757577747",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoListItems",
      "file": "src\\components\\TodoListItems.tsx",
      "line": 43,
      "description": "User data rendered without proper encoding",
      "evidence": "{filteredTodos.map((todo) => {\r\n                return (\r\n                  <div key={todo.id}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.05667440082556663",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoListItems",
      "file": "src\\components\\TodoListItems.tsx",
      "line": 47,
      "description": "User data rendered without proper encoding",
      "evidence": "{todo.id}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949182-0.3970930332539917",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoListItems",
      "file": "src\\components\\TodoListItems.tsx",
      "line": 58,
      "description": "User data rendered without proper encoding",
      "evidence": "{todo.id}",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949183-0.7494320258761131",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoListView",
      "file": "src\\components\\TodoListView.tsx",
      "line": 92,
      "description": "User data rendered without proper encoding",
      "evidence": "{\r\n    const totalTasks = todos.length;\r\n    const completedTasks = todos.filter(todo => todo.completed).length;\r\n    const highPriorityTasks = todos.filter(todo => todo.priority === \"high\" && !todo.completed).length;\r\n    const progress = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;\r\n\r\n    return {\r\n      totalTasks,\r\n      completedTasks,\r\n      highPriorityTasks,\r\n      progress\r\n    }",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949183-0.8275956859024545",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoListView",
      "file": "src\\components\\TodoListView.tsx",
      "line": 109,
      "description": "User data rendered without proper encoding",
      "evidence": "{\r\n    return todos.filter(todo => {\r\n      // Filter by completion status\r\n      if (!filters.showCompleted && todo.completed) {\r\n        return false;\r\n      }",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949183-0.8688240882129195",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoListView",
      "file": "src\\components\\TodoListView.tsx",
      "line": 118,
      "description": "User data rendered without proper encoding",
      "evidence": "{\r\n        if (!filters.priorities[todo.priority]) {\r\n          return false;\r\n        }",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949183-0.5988479354274516",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoListView",
      "file": "src\\components\\TodoListView.tsx",
      "line": 145,
      "description": "User data rendered without proper encoding",
      "evidence": "{\r\n      allTodos = todos.filter((todo) => todo.completed);\r\n    }",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    },
    {
      "id": "xss-output-encoding-1752673949183-0.5794282944117579",
      "severity": "medium",
      "type": "reflected_xss",
      "component": "src\\components\\TodoListView",
      "file": "src\\components\\TodoListView.tsx",
      "line": 149,
      "description": "User data rendered without proper encoding",
      "evidence": "{\r\n      allTodos = todos.filter((todo) => todo.listId === selectedListId);\r\n    }",
      "recommendation": "Ensure user data is properly encoded before rendering. React automatically encodes text content, but be careful with HTML attributes and dynamic content.",
      "cweId": "CWE-79"
    }
  ],
  "inputValidationIssues": [
    {
      "id": "input-validation-1752673949165-0.09089510245798982",
      "severity": "medium",
      "type": "missing_validation",
      "component": "src\\components\\CreateListDialog",
      "file": "src\\components\\CreateListDialog.tsx",
      "line": 125,
      "inputField": "<input\r\n            id=\"listName\"\r\n            type=\"text\"\r\n            value={listName}\r\n            onChange={(e) =>",
      "description": "Input field lacks proper validation attributes",
      "evidence": "<input\r\n            id=\"listName\"\r\n            type=\"text\"\r\n            value={listName}\r\n            onChange={(e) =>",
      "recommendation": "Add appropriate validation attributes (required, pattern, maxLength, etc.) and implement server-side validation."
    },
    {
      "id": "input-validation-1752673949170-0.058632342665501325",
      "severity": "medium",
      "type": "missing_validation",
      "component": "src\\components\\EditTodoDialog",
      "file": "src\\components\\EditTodoDialog.tsx",
      "line": 212,
      "inputField": "<input\r\n                type=\"date\"\r\n                id=\"todoDueDate\"\r\n                value={editDueDate}\r\n                onChange={(e) =>",
      "description": "Input field lacks proper validation attributes",
      "evidence": "<input\r\n                type=\"date\"\r\n                id=\"todoDueDate\"\r\n                value={editDueDate}\r\n                onChange={(e) =>",
      "recommendation": "Add appropriate validation attributes (required, pattern, maxLength, etc.) and implement server-side validation."
    },
    {
      "id": "input-validation-1752673949170-0.3869338609664894",
      "severity": "medium",
      "type": "missing_validation",
      "component": "src\\components\\EditTodoDialog",
      "file": "src\\components\\EditTodoDialog.tsx",
      "line": 133,
      "inputField": "<textarea\r\n              id=\"todoText\"\r\n              value={editText}\r\n              onChange={(e) =>",
      "description": "Input field lacks proper validation attributes",
      "evidence": "<textarea\r\n              id=\"todoText\"\r\n              value={editText}\r\n              onChange={(e) =>",
      "recommendation": "Add appropriate validation attributes (required, pattern, maxLength, etc.) and implement server-side validation."
    },
    {
      "id": "input-validation-1752673949170-0.0827026931231769",
      "severity": "medium",
      "type": "missing_validation",
      "component": "src\\components\\EditTodoDialog",
      "file": "src\\components\\EditTodoDialog.tsx",
      "line": 158,
      "inputField": "<textarea\r\n              id=\"todoNotes\"\r\n              value={editNotes}\r\n              onChange={(e) =>",
      "description": "Input field lacks proper validation attributes",
      "evidence": "<textarea\r\n              id=\"todoNotes\"\r\n              value={editNotes}\r\n              onChange={(e) =>",
      "recommendation": "Add appropriate validation attributes (required, pattern, maxLength, etc.) and implement server-side validation."
    },
    {
      "id": "input-validation-1752673949170-0.8906819308787717",
      "severity": "medium",
      "type": "missing_validation",
      "component": "src\\components\\EditTodoDialog",
      "file": "src\\components\\EditTodoDialog.tsx",
      "line": 182,
      "inputField": "<select\r\n              id=\"todoList\"\r\n              value={editListId}\r\n              onChange={(e) =>",
      "description": "Input field lacks proper validation attributes",
      "evidence": "<select\r\n              id=\"todoList\"\r\n              value={editListId}\r\n              onChange={(e) =>",
      "recommendation": "Add appropriate validation attributes (required, pattern, maxLength, etc.) and implement server-side validation."
    },
    {
      "id": "input-validation-1752673949170-0.2857224606174784",
      "severity": "medium",
      "type": "missing_validation",
      "component": "src\\components\\EditTodoDialog",
      "file": "src\\components\\EditTodoDialog.tsx",
      "line": 234,
      "inputField": "<select\r\n                id=\"todoPriority\"\r\n                value={editPriority}\r\n                onChange={(e) =>",
      "description": "Input field lacks proper validation attributes",
      "evidence": "<select\r\n                id=\"todoPriority\"\r\n                value={editPriority}\r\n                onChange={(e) =>",
      "recommendation": "Add appropriate validation attributes (required, pattern, maxLength, etc.) and implement server-side validation."
    },
    {
      "id": "input-validation-1752673949172-0.7582874816031764",
      "severity": "medium",
      "type": "missing_validation",
      "component": "src\\components\\FilterDialog",
      "file": "src\\components\\FilterDialog.tsx",
      "line": 92,
      "inputField": "<input\r\n                  type=\"checkbox\"\r\n                  checked={filters.showCompleted}\r\n                  onChange={(e) =>",
      "description": "Input field lacks proper validation attributes",
      "evidence": "<input\r\n                  type=\"checkbox\"\r\n                  checked={filters.showCompleted}\r\n                  onChange={(e) =>",
      "recommendation": "Add appropriate validation attributes (required, pattern, maxLength, etc.) and implement server-side validation."
    },
    {
      "id": "input-validation-1752673949172-0.9886525227378435",
      "severity": "medium",
      "type": "missing_validation",
      "component": "src\\components\\FilterDialog",
      "file": "src\\components\\FilterDialog.tsx",
      "line": 143,
      "inputField": "<input\r\n                      type=\"checkbox\"\r\n                      checked={filters.priorities[priority]}\r\n                      onChange={(e) =>",
      "description": "Input field lacks proper validation attributes",
      "evidence": "<input\r\n                      type=\"checkbox\"\r\n                      checked={filters.priorities[priority]}\r\n                      onChange={(e) =>",
      "recommendation": "Add appropriate validation attributes (required, pattern, maxLength, etc.) and implement server-side validation."
    },
    {
      "id": "input-validation-1752673949172-0.11088170269401432",
      "severity": "medium",
      "type": "missing_validation",
      "component": "src\\components\\FilterDialog",
      "file": "src\\components\\FilterDialog.tsx",
      "line": 181,
      "inputField": "<input\r\n                  type=\"checkbox\"\r\n                  checked={filters.hasDueDate}\r\n                  onChange={(e) =>",
      "description": "Input field lacks proper validation attributes",
      "evidence": "<input\r\n                  type=\"checkbox\"\r\n                  checked={filters.hasDueDate}\r\n                  onChange={(e) =>",
      "recommendation": "Add appropriate validation attributes (required, pattern, maxLength, etc.) and implement server-side validation."
    },
    {
      "id": "input-validation-1752673949173-0.5233568421102521",
      "severity": "medium",
      "type": "missing_validation",
      "component": "src\\components\\ListEditDialog",
      "file": "src\\components\\ListEditDialog.tsx",
      "line": 130,
      "inputField": "<input\r\n            id=\"listName\"\r\n            type=\"text\"\r\n            value={editName}\r\n            onChange={(e) =>",
      "description": "Input field lacks proper validation attributes",
      "evidence": "<input\r\n            id=\"listName\"\r\n            type=\"text\"\r\n            value={editName}\r\n            onChange={(e) =>",
      "recommendation": "Add appropriate validation attributes (required, pattern, maxLength, etc.) and implement server-side validation."
    },
    {
      "id": "input-validation-1752673949176-0.11823958524604028",
      "severity": "medium",
      "type": "missing_validation",
      "component": "src\\components\\LoginForm",
      "file": "src\\components\\LoginForm.tsx",
      "line": 85,
      "inputField": "<input\r\n              id=\"password\"\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) =>",
      "description": "Input field lacks proper validation attributes",
      "evidence": "<input\r\n              id=\"password\"\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) =>",
      "recommendation": "Add appropriate validation attributes (required, pattern, maxLength, etc.) and implement server-side validation."
    },
    {
      "id": "input-validation-1752673949178-0.7330480963410249",
      "severity": "medium",
      "type": "missing_validation",
      "component": "src\\components\\SettingsView",
      "file": "src\\components\\SettingsView.tsx",
      "line": 107,
      "inputField": "<input\r\n                      type=\"radio\"\r\n                      name=\"sortBy\"\r\n                      value={option.value}\r\n                      checked={sortBy === option.value}\r\n                      onChange={(e) =>",
      "description": "Input field lacks proper validation attributes",
      "evidence": "<input\r\n                      type=\"radio\"\r\n                      name=\"sortBy\"\r\n                      value={option.value}\r\n                      checked={sortBy === option.value}\r\n                      onChange={(e) =>",
      "recommendation": "Add appropriate validation attributes (required, pattern, maxLength, etc.) and implement server-side validation."
    },
    {
      "id": "input-validation-1752673949181-0.2887000241032658",
      "severity": "medium",
      "type": "missing_validation",
      "component": "src\\components\\TodoForm",
      "file": "src\\components\\TodoForm.tsx",
      "line": 10,
      "inputField": "<input\r\n          type=\"text\"\r\n          value={newTodo}\r\n          onChange={(e) =>",
      "description": "Input field lacks proper validation attributes",
      "evidence": "<input\r\n          type=\"text\"\r\n          value={newTodo}\r\n          onChange={(e) =>",
      "recommendation": "Add appropriate validation attributes (required, pattern, maxLength, etc.) and implement server-side validation."
    },
    {
      "id": "input-validation-1752673949183-0.6509707931034339",
      "severity": "medium",
      "type": "missing_validation",
      "component": "src\\components\\TodoListView",
      "file": "src\\components\\TodoListView.tsx",
      "line": 265,
      "inputField": "<input\r\n                  type=\"text\"\r\n                  value={searchQuery}\r\n                  onChange={(e) =>",
      "description": "Input field lacks proper validation attributes",
      "evidence": "<input\r\n                  type=\"text\"\r\n                  value={searchQuery}\r\n                  onChange={(e) =>",
      "recommendation": "Add appropriate validation attributes (required, pattern, maxLength, etc.) and implement server-side validation."
    }
  ],
  "summary": {
    "totalVulnerabilities": 41,
    "criticalCount": 0,
    "highCount": 0,
    "mediumCount": 41,
    "lowCount": 0,
    "componentsAnalyzed": 18,
    "inputFieldsAnalyzed": 15
  },
  "recommendations": [
    "Implement Content Security Policy (CSP) to prevent XSS attacks",
    "Use React's built-in XSS protection by avoiding dangerouslySetInnerHTML",
    "Validate and sanitize all user inputs on both client and server side",
    "Use proper encoding for dynamic content in HTML attributes",
    "Implement server-side validation for all form inputs",
    "Use HTTPS for all data transmission",
    "Regularly update dependencies to patch known vulnerabilities",
    "Implement input length limits and character restrictions",
    "Use parameterized queries to prevent injection attacks",
    "Implement proper error handling without information disclosure",
    "Add comprehensive input validation to all form fields"
  ]
}