name: Dependency Security Scan

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

env:
  NODE_VERSION: '18'
  RUST_VERSION: 'stable'

jobs:
  npm-security-scan:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        id: npm-audit
        run: |
          # Run audit and capture results
          npm audit --audit-level moderate --json > npm-audit-results.json || true
          
          # Also run human-readable audit for logs
          echo "::group::NPM Audit Results"
          npm audit --audit-level moderate || true
          echo "::endgroup::"
          
          # Check if critical vulnerabilities exist
          CRITICAL_COUNT=$(jq -r '.metadata.vulnerabilities.critical // 0' npm-audit-results.json)
          HIGH_COUNT=$(jq -r '.metadata.vulnerabilities.high // 0' npm-audit-results.json)
          
          echo "critical-count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high-count=$HIGH_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "::error::Found $CRITICAL_COUNT critical vulnerabilities in npm dependencies"
            exit 1
          elif [ "$HIGH_COUNT" -gt 0 ]; then
            echo "::warning::Found $HIGH_COUNT high-severity vulnerabilities in npm dependencies"
          fi
      
      - name: Upload npm audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-results
          path: npm-audit-results.json
          retention-days: 30

  cargo-security-scan:
    name: Cargo Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
      
      - name: Run cargo audit
        id: cargo-audit
        working-directory: src-tauri
        run: |
          # Run audit and capture results
          cargo audit --json > ../cargo-audit-results.json || true
          
          # Also run human-readable audit for logs
          echo "::group::Cargo Audit Results"
          cargo audit || true
          echo "::endgroup::"
          
          # Check if vulnerabilities exist
          VULN_COUNT=$(jq -r '.vulnerabilities.count // 0' ../cargo-audit-results.json)
          CRITICAL_VULNS=$(jq -r '[.vulnerabilities.list[]? | select(.advisory.severity == "critical")] | length' ../cargo-audit-results.json)
          
          echo "vulnerability-count=$VULN_COUNT" >> $GITHUB_OUTPUT
          echo "critical-count=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "::error::Found $CRITICAL_VULNS critical vulnerabilities in Rust dependencies"
            exit 1
          elif [ "$VULN_COUNT" -gt 0 ]; then
            echo "::warning::Found $VULN_COUNT vulnerabilities in Rust dependencies"
          fi
      
      - name: Upload cargo audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cargo-audit-results
          path: cargo-audit-results.json
          retention-days: 30

  security-report:
    name: Generate Security Report
    needs: [npm-security-scan, cargo-security-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download audit results
        uses: actions/download-artifact@v4
        with:
          pattern: '*-audit-results'
          merge-multiple: true
      
      - name: Generate security report
        run: |
          # Make script executable
          chmod +x scripts/generate-security-report.js
          
          # Generate comprehensive security report
          node scripts/generate-security-report.js
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-reports/latest-security-report.*
          retention-days: 90
      
      - name: Comment on PR with security report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const reportPath = 'security-reports/latest-security-report.json';
              if (fs.existsSync(reportPath)) {
                const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                
                const comment = `## ðŸ”’ Security Scan Results
                
                **Risk Level**: ${report.riskAssessment.level}
                **Total Vulnerabilities**: ${report.summary.totalVulnerabilities}
                
                ### Summary
                - Critical: ${report.summary.critical}
                - High: ${report.summary.high}
                - Moderate: ${report.summary.moderate}
                - Low: ${report.summary.low}
                
                ### Recommendations
                ${report.recommendations.map(rec => `- **${rec.priority}**: ${rec.description}`).join('\n')}
                
                <details>
                <summary>View detailed report</summary>
                
                Full security report available in workflow artifacts.
                </details>`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not post security report comment:', error.message);
            }

  create-security-issue:
    name: Create Security Issue
    needs: [npm-security-scan, cargo-security-scan, security-report]
    runs-on: ubuntu-latest
    if: |
      always() && 
      (needs.npm-security-scan.outputs.critical-count > 0 || 
       needs.cargo-security-scan.outputs.critical-count > 0)
    
    steps:
      - name: Create security issue
        uses: actions/github-script@v7
        with:
          script: |
            const npmCritical = '${{ needs.npm-security-scan.outputs.critical-count }}' || '0';
            const cargoCritical = '${{ needs.cargo-security-scan.outputs.critical-count }}' || '0';
            
            const title = 'ðŸš¨ Critical Security Vulnerabilities Detected';
            const body = `## Critical Security Alert
            
            Automated security scanning has detected critical vulnerabilities in our dependencies:
            
            - **NPM Critical Vulnerabilities**: ${npmCritical}
            - **Cargo Critical Vulnerabilities**: ${cargoCritical}
            
            ## Immediate Actions Required
            
            1. Review the security scan results in the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            2. Download and analyze the detailed security report
            3. Apply security updates immediately
            4. Test the application thoroughly
            5. Deploy security fixes as soon as possible
            
            ## Resources
            
            - [Security Report Artifact](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - [Dependency Security Management Plan](./security-reports/dependency-security-management-plan.md)
            
            **Priority**: CRITICAL
            **Assigned**: Security Team
            
            ---
            *This issue was created automatically by the security scanning workflow.*`;
            
            // Check if similar issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,critical,dependencies',
              state: 'open'
            });
            
            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'critical', 'dependencies'],
                assignees: ['security-team'] // Replace with actual team members
              });
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssues.data[0].number,
                body: `## Updated Security Scan Results\n\n${body}`
              });
            }

  notify-team:
    name: Notify Security Team
    needs: [npm-security-scan, cargo-security-scan]
    runs-on: ubuntu-latest
    if: |
      always() && 
      (needs.npm-security-scan.outputs.critical-count > 0 || 
       needs.cargo-security-scan.outputs.critical-count > 0)
    
    steps:
      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "ðŸš¨ Critical security vulnerabilities detected in Todo2 dependencies",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "NPM Critical",
                      "value": "${{ needs.npm-security-scan.outputs.critical-count }}",
                      "short": true
                    },
                    {
                      "title": "Cargo Critical",
                      "value": "${{ needs.cargo-security-scan.outputs.critical-count }}",
                      "short": true
                    },
                    {
                      "title": "Workflow",
                      "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Results>",
                      "short": false
                    }
                  ]
                }
              ]
            }' \
            $SLACK_WEBHOOK_URL
      
      - name: Send email notification
        if: env.SECURITY_EMAIL != ''
        env:
          SECURITY_EMAIL: ${{ secrets.SECURITY_EMAIL }}
        run: |
          echo "Critical security vulnerabilities detected. Check GitHub Actions for details." | \
          mail -s "CRITICAL: Security vulnerabilities in Todo2" $SECURITY_EMAIL || true